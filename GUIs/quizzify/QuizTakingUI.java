/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package quizzify;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.Timer;

import util.Question;
import util.Quiz;

/**
 *
 * @author maya1
 */
public class QuizTakingUI extends javax.swing.JFrame {

    private JRadioButton[] optionRadioButtons;
    private Quiz quiz;
    private int timeRemaining;
    private Timer timer;
    private int currentQuestionIndex;

    /**
     * Creates new form QuizTakingUI
     */
    public QuizTakingUI() {
        initComponents();
        timerLabel = new JLabel();

        timer = new Timer(1000, e -> {
            timeRemaining--;
            timerLabel.setText("Time Remaining: " + timeRemaining + " seconds");
            if (timeRemaining <= 0) {
                showNextQuestion();
                Logger.getLogger(QuizTakingUI.class.getName()).info("Timer Started");
            }
        });

        updateQuestion();
    }

    public QuizTakingUI(Quiz quiz) {
        initComponents();
        this.quiz = quiz;
        this.currentQuestionIndex = 0;
        this.timeRemaining = 60; // 60 seconds for each question
        timerLabel = new JLabel();

        timer = new Timer(1000, e -> {
            timeRemaining--;
            timerLabel.setText("Time Remaining: " + timeRemaining + " seconds");
            if (timeRemaining <= 0) {
                showNextQuestion();
                Logger.getLogger(QuizTakingUI.class.getName()).info("Timer Started");
            }
        });

        updateQuestion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionGroup = new javax.swing.ButtonGroup();
        quizPanel = new javax.swing.JPanel();
        nextButton = new javax.swing.JButton();
        questionTextArea = new javax.swing.JTextField();
        timerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        quizPanel.setBackground(new java.awt.Color(204, 0, 204));

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        timerLabel.setBackground(new java.awt.Color(255, 0, 0));
        timerLabel.setText("jLabel2");

        javax.swing.GroupLayout quizPanelLayout = new javax.swing.GroupLayout(quizPanel);
        quizPanel.setLayout(quizPanelLayout);
        quizPanelLayout.setHorizontalGroup(
            quizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(questionTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(189, Short.MAX_VALUE))
            .addGroup(quizPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(quizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, quizPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        quizPanelLayout.setVerticalGroup(
            quizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(questionTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 415, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timerLabel)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(quizPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(quizPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextButtonActionPerformed
        int selectedOptionIndex = getSelectedOptionIndex();
        int correctAnswerIndex = quiz.getQuestion(currentQuestionIndex).getCorrectAnswerIndex();

        currentQuestionIndex++;

        if (currentQuestionIndex < quiz.getNumQuestions()) {
            processAnswer(selectedOptionIndex, correctAnswerIndex);
            updateQuestion();
        } else {
            JOptionPane.showMessageDialog(this, "Quiz Completed");
        }
    }// GEN-LAST:event_nextButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuizTakingUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        Quiz quiz = new Quiz();
        Question question1 = new Question("What is the capital of France?", List.of("London", "Berlin", "Paris"), 2);
        Question question2 = new Question("Which planet is known as the Red Planet?", List.of("Earth", "Mars", "Venus"),
                1);
        List<String> optionsForQuestion3 = new ArrayList<>();
        optionsForQuestion3.add("Jupiter");
        optionsForQuestion3.add("Saturn");
        optionsForQuestion3.add("Mars");
        optionsForQuestion3.add("Uranus");

        Question question3 = new Question("What is the largest planet in our solar system?", optionsForQuestion3, 0);
        quiz.addQuestion(question1);
        quiz.addQuestion(question2);
        quiz.addQuestion(question3);

        java.awt.EventQueue.invokeLater(() -> new QuizTakingUI(quiz).setVisible(true));
    }

    public void startQuiz() {
        showNextQuestion();
        timer.start();
        this.setVisible(true);
    }

    private void showNextQuestion() {
        if (currentQuestionIndex < quiz.getNumQuestions()) {
            int selectedOptionIndex = getSelectedOptionIndex();
            int correctAnswerIndex = quiz.getQuestion(currentQuestionIndex).getCorrectAnswerIndex();

            currentQuestionIndex++;
            processAnswer(selectedOptionIndex, correctAnswerIndex);
            updateQuestion();
            nextButton.setEnabled(false);
            currentQuestionIndex++;
            timeRemaining = 60;
        } else {
            timer.stop();
            JOptionPane.showMessageDialog(this, "Quiz completed!");
            this.dispose();
        }
    }

    private void updateQuestion() {
        Question currentQuestion = quiz.getQuestion(currentQuestionIndex);
        questionTextArea.setText(currentQuestion.getPrompt());

        if (optionRadioButtons != null) {
            for (int i = 0; i < optionRadioButtons.length; i++) {
                optionGroup.remove(optionRadioButtons[i]);
                quizPanel.remove(optionRadioButtons[i]);
            }
        }

        optionRadioButtons = new JRadioButton[currentQuestion.getNumOptions()];

        for (int i = 0; i < currentQuestion.getNumOptions(); i++) {
            optionRadioButtons[i] = new JRadioButton(currentQuestion.getOption(i));
            optionGroup.add(optionRadioButtons[i]);
            quizPanel.add(optionRadioButtons[i]);
        }

        optionGroup.clearSelection();
        this.revalidate();
        Logger.getLogger(QuizTakingUI.class.getName()).log(Level.INFO, "Question Updated");
    }

    private void processAnswer(int selectedOptionIndex, int correctAnswerIndex) {
        if (optionGroup.getSelection() != null) {
            if (selectedOptionIndex == correctAnswerIndex) {
                JOptionPane.showMessageDialog(this, "Correct!");
            } else {
                JOptionPane.showMessageDialog(this, "Incorrect!");
            }
            nextButton.setEnabled(true);
        }
    }

    private int getSelectedOptionIndex() {
        for (int i = 0; i < optionRadioButtons.length; i++) {
            if (optionRadioButtons[i].isSelected()) {
                return i;
            }
        }
        return -1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton nextButton;
    private javax.swing.ButtonGroup optionGroup;
    private javax.swing.JTextField questionTextArea;
    private javax.swing.JPanel quizPanel;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
